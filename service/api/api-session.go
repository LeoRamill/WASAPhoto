package api

import (
	"encoding/json"
	"net/http"

	"github.com/julienschmidt/httprouter"
	"wasaphoto.uniroma1.it/photo1984766/service/api/reqcontext"
	"wasaphoto.uniroma1.it/photo1984766/service/components"
)

// /session
func (rt *_router) doLogin(w http.ResponseWriter, r *http.Request, ps httprouter.Params, ctx reqcontext.RequestContext) {
	w.Header().Set("Content-Type", "application/json")
	// We define the variable uname with type Username
	var user2 components.Username
	// We need to READ the information --> DECODER
	err := json.NewDecoder(r.Body).Decode(&user2)
	// Now check if error exist --> error different to nil
	if err != nil {
		// The body was not parsable JSON --> reject it
		w.WriteHeader(http.StatusBadRequest)
		_, err := w.Write([]byte(components.BadRequestError))

		if err != nil {
			ctx.Logger.WithError(err).Error("error writing response")
		}

		ctx.Logger.WithError(err).Error("error parsing request body, details")
		return
	}
	// Check if the path exist --> len(string) !=0
	if user2.Usname == "" {
		// USERNAME INVALID: write in the header that the status is a bad request since it's an empty string
		w.WriteHeader(http.StatusBadRequest)
		_, err := w.Write([]byte(components.BadRequestError))

		if err != nil {
			ctx.Logger.WithError(err).Error("error writing response")
		}
		return
	}
	// check if exist the username in the database
	exist, err := rt.db.CheckUsername(user2.Usname)
	// check if the error is generated by the database side
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)

		_, err := w.Write([]byte(components.InternalServerError))

		if err != nil {
			ctx.Logger.WithError(err).Error("error writing response")
		}

		ctx.Logger.WithError(err).Error("error validating user")
		return
	}

	// If the username doesn't exist then we must create it
	if !exist {
		// Create the variable User
		var user components.User
		// assign randomly the user id --> function defined in utils.go
		user.IdUser.Id = RandomString(64)
		// assign in the variable User the name that was used for the login
		user.Usname = user2.Usname

		// Create the user in the database --> insert in the database the user
		id_exist, err := rt.db.CreateUser(user)
		// check if the error is generated by the database side
		if err != nil {
			// exist the error --> put in the header message Internal Server Error
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				_, err := w.Write([]byte(components.InternalServerError))

				if err != nil {
					ctx.Logger.WithError(err).Error("error writing response")
				}
				ctx.Logger.WithError(err).Error("session: can't create response json")
			}
			return
		}

		// Create user's directories locally --> function defined in utils.go
		err = createUserFolder(user.Usname, ctx)
		// check if the function generated an error --> Internal Server Error
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			ctx.Logger.WithError(err).Error("session: can't create user's photo folder")
			return
		}

		// Write in the header message the status created (201)
		w.WriteHeader(http.StatusCreated)
		// Send the output to the user the id--> Creation --> Encoder
		err = json.NewEncoder(w).Encode(id_exist)
		if err != nil {
			// The body was not parsable JSON --> reject it
			w.WriteHeader(http.StatusInternalServerError)
			_, err := w.Write([]byte(components.InternalServerError))

			if err != nil {
				ctx.Logger.WithError(err).Error("error writing response")
			}
			ctx.Logger.WithError(err).Error("error can't create response json, details")
			return
		}
		// if the user exist (so it appears in the database), just return the name
	} else {
		// initialize the variable id_creat with type string and assign the value using GetUserID
		id_creat, err := rt.db.GetUserID(user2)
		// check if the error is generated by the database side
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		// Write in the header message the status OK (200)
		w.WriteHeader(http.StatusOK)
		// Send the output to the user the id--> Creation --> Encoder
		err = json.NewEncoder(w).Encode(id_creat)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			_, err := w.Write([]byte(components.InternalServerError))

			if err != nil {
				ctx.Logger.WithError(err).Error("error writing response")
			}
			return
		}
	}

}
